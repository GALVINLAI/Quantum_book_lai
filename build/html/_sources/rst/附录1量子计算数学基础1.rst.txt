1.1 概述
==================================
  对于不具有任何高等数学基础背景的读者，本节将从集合与映射、向量空间、矩阵与矩阵的运算、矩阵的特征、矩阵的函数以及线性算子与矩阵表示等相对简单易懂的数学开始讲起，以便各位循序渐进理解量子计算的数学原理。

1.2 集合与映射
==================================

1.2.1 集合的概念
----------------------------------
  当提到中国古代四大发明时，大家一般会想到造纸术、印刷术、指南针和火药；当提到中国的四大名著时，大家会想起吴承恩的《西游记》、罗贯中的《三国演义》、曹雪芹的《红楼梦》、施耐庵的《水浒传》。生活中有很多类似于四大发明、四大名著的称呼，比如：世界上的所有国家、彩虹的颜色、三原色等等，这些称呼都有一个共同的特点，就是将具有明确地相同特性的事物放在一起的统称。

  在数学上，把具有某种特征事物的总体称为集合（set）,组成该集合的事物称为该集合的元素（element）[1,5]。比如，中国的四大名著，就可以称为一个集合，《西游记》则是其中的一个元素。有时为了方便与简洁，在数学上会引进一些符号来表示一些数学名称，这就使得数学上了一个台阶，当通过练习知道这些符号代表的内在含义时，就很方便地去推导以及交流。

  但是这种符号表示的简化也为后来学习者或多或少带来了一些障碍。因为当没有介绍过某个概念，突然看到一个符号表示，智力再好也不可能知道它代表的含义。比如世界上第一个人发明“※”表示太阳，但他没有告诉你，这符号“※”表示太阳,而是给你画出这个符号“※”，问你这是什么时，这个问题换着任何人都不可能回答，除非是发明者，因为只有他一个人知道这个符号代表的含义，当人们都开始用这个符号“※”表示太阳时，这就极大地方便人们之间的交流，因为这符号写起来相对简单些。如果过仅有部分人知道，还可以作为密码来使用，从某种意义上来说，数学也是一门符号化的语言。所以，在学习数学的时候，首先要弄明白符号背后的含义是什么。

  下面，引进大写的拉丁字母A、B、C等符号来表示集合，用小写的拉丁字母a、b、c等符号表示集合的元素，需要注意的是有的时候拉丁字母不够多或者不方便时，也会引进其他的符号表示元素。比如用B这个符号表示四大名著，用 :math:`b_1` 表示《西游记》、 :math:`b_2` 表示《三国演义》、 :math:`b_3` 表示《红楼梦》、 :math:`b_4` 表示《水浒传》。 :math:`b_1` 是B的元素，在数学上，通常说 :math:`b_1` 属于B，记做 :math:`{b_1} \in B` 。假设，h表示《海底两万里》，h就不是集合B的元素，就说h不属于B，记做 :math:`{h} \notin B` 。

  像四大名著这样的集合有有限个元素，称为有限集；也可以通过列举法来表示这个集合。例如，可以将C的元素一一列举出来写在大括号里面

.. math::
    C=\left\{c_{1}, c_{2}, c_{3}, c_{4}\right\}

  如果遇到像自然数集（自然数组成的集合）有无限多个元素该如何来表示呢？通常称有无限多个元素的集合为无限集，好在自然数集有了0和1，其他的数就都知道了；也可以通过列举法来列举出有限个，其余的用省略号代替。自然数集 :math:`N` 用列举法表示为

.. math::
    N=\{0,1,2, \cdots, n, \cdots\}

  同样地，用列举法可以表示正整数集（所有正整数组成的集合）

.. math::
    N^{+}=\{1,2,3, \cdots, n, \cdots\}

  整数集（所有整数组成的集合）

.. math::
    Z=\{\cdots,-n, \cdots, -2,-1,0,1,2, \cdots, n, \cdots\}

  那像有理数集（所有有理数组成的集合）就不能用列举法来表示了，因为任意两个有理数之间一定还存在有理数（比如这两个有理数之间的中间值）。将有理数的性质描述出来写在大括号中：

.. math::
    Q=\left\{q \mid q=\frac{m}{n}, m \in Z, n \in N^{+} \text {且 } m, n \text { 互质 }\right\}

  这种将用元素具有的性质来表示的方法叫描述法。若集合 :math:`A` 由具有某种性质 :math:`\Gamma` 的元素 :math:`a` 组成，则描述法的一般形式为

.. math::
    A=\{a \mid a \text { 具有性质 } \Gamma\}

  同样地，可以用描述法来表示无理数集

.. math::
    P=\left\{p \mid p \neq \frac{m}{n}, \forall m \in Z, \forall n \in N^{+} \text {且 } m, n \text { 互质 }\right\}

  其中符号 :math:`\forall` 表示任意的。

​  同时，也可以用自然语言描述法来描述集合，比如，实数集R是所有有理数和无理数组成的集合。

​  在量子计算中常常会用到复数集

.. math::
    C=\left\{c \mid c=a+b i, a, b \in R, i^{2}=-1\right\}

  其中 :math:`{c}= {a}+ {bi}` 表示复数（complex number）,实部 :math:`a` 和虚部 :math:`b` 都是实数， :math:`i` 在这里表示一个符号并且满足 :math:`i^{2}=-1` 。 有时，用有序数对 :math:`(a,b)` 来表示复数 :math:`{a}+b {i}` 。

  两个复数 :math:`c_{1}=a_{1}+b_{1} i` 和 :math:`c_{2}=a_{2}+b_{2} i` 相等的充要条件是实部和虚部分别对应相等，即

.. math::
    c_{1}=c_{2} \Leftrightarrow a_{1}=a_{2}, b_{1}=b_{2}

​  两个复数 :math:`c_{1}=a_{1}+b_{1} i` 和 :math:`c_{2}=a_{2}+b_{2} i` 做和相当于实部和虚部分别对应做和，即

.. math::
    c_{1}+c_{2}=\left(a_{1}+a_{2}\right)+\left(b_{1}+b_{2}\right) i

​  两个复数 :math:`c_{1}=a_{1}+b_{1} i` 和 :math:`c_{2}=a_{2}+b_{2} i` 做差相当于实部和虚部分别对应做差，即

.. math::
    c_{1}-c_{2}=\left(a_{1}-a_{2}\right)+\left(b_{1}-b_{2}\right) i

  两个复数 :math:`c_{1}=a_{1}+b_{1} i` 和 :math:`c_{2}=a_{2}+b_{2} i` 乘法被定义为

.. math::
    \begin{aligned} &c_{1} c_{2}=\left(a_{1}+b_{1} i\right)\left(a_{2}+b_{2} i\right) \\ &=a_{1}\left(a_{2}+b_{2} i\right)+b_{1} i\left(a_{2}+b_{2} i\right) \\ &=a_{1} a_{2}+a_{1} b_{2} i+b_{1} i a_{2}+b_{1} i b_{2} i \\ &=a_{1} a_{2}+a_{1} b_{2} i+b_{1} a_{2} i+b_{1} b_{2} i^{2} \end{aligned}

  因为 :math:`i^{2}=-1` ，因此

.. math::
    \left(a_{1}+b_{1} i\right)\left(a_{2}+b_{2} i\right)=\left(a_{1} a_{2}-b_{1} b_{2}\right)+\left(a_{1} b_{2}+b_{1} a_{2}\right) i

  比如

.. math::
    \begin{aligned} &(1-2 i)(-3+4 i)=1 \cdot(-3+4 i)+(-2 i)(-3+4 i) \\ &=1 \cdot(-3)+1 \cdot 4 i+(-2 i) \cdot(-3)+(-2 i) \cdot(4 i) \\ &=-3+4 i+6 i+8 \\ &=5+10 i \end{aligned}

  在给出两个复数除法的定义之前，先定义复数 :math:`c=a+b i` 的复共轭（complex conjugate）为

.. math::
    \bar{c}=a-b i

  或

.. math::
    c^{*}=a-b i

  由复数的乘法，可知

.. math::
    c \bar{c}=(a+b i)(a-b i)=a^{2}+b^{2}

  那么根据复共轭的定义，两个复数） :math:`c_{1}=a_{1}+b_{1} i` 和 :math:`c_{2}=a_{2}+b_{2} i` 除法被定义为

.. math::
    \frac{c_{1}}{c_{2}}=\frac{c_{1} \bar{c}_{2}}{c_{2} \bar{c}_{2}}=\frac{\left(a_{1}+b_{1} i\right)\left(a_{2}-b_{2} i\right)}{\left(a_{2}+b_{2} i\right)\left(a_{2}-b_{2} i\right)}=\frac{\left(a_{1} a_{2}+b_{1} b_{2}\right)+\left(b_{1} a_{2}-a_{1} b_{2}\right) i}{a_{2}^{2}+b_{2}^{2}}

  比如，将 :math:`\frac{1+2 i}{3-4 i}` 写成 :math:`a+b i` 的形式为

.. math::
    \frac{1+2 i}{3-4 i}=\frac{1+2 i}{3-4 i} \cdot \frac{3+4 i}{3+4 i}=\frac{-5+10 i}{3^{2}+4^{2}}=-\frac{1}{5}+\frac{2}{5} i


1.2.2 集合的关系
----------------------------------
​  把集合看成一个对象，那么集合之间有什么关系呢？集合是由元素组成，因此还要从元素进行分析。

​  假设有两个集合 :math:`S_{1}` 和 :math:`S_{2}` ，如果集合 :math:`S_{1}` 的元素都是集合 :math:`S_{2}` 的元素，那么称 :math:`S_{1}` 是 :math:`S_{2}` 的子集，记作 :math:`S_{1} \subseteq S_{2}` （读作 :math:`S_{1}` 包含于 :math:`S_{2}` ）或 :math:`S_{2} \supseteq S_{1}` （读作 :math:`S_{2}` 包含 :math:`S_{1}` ）。比如无理数集就是实数集的子集，因为无理数集中的每一个元素都在实数集中。

​  如果两个集合中的元素都相同，那么称这两个集合相等，即是说，如果集合 :math:`S_{1}` 与集合 :math:`S_{2}` 互为子集，那么就称集合 :math:`S_{1}` 与 :math:`S_{2}` 相等,记作 :math:`S_{1}=S_{2}` 。例如，偶数集 :math:`S_{1}` 与集合 :math:`S_{2}=\{n \mid n % m=0, m \in Z, n \in Z, m=2\}` 相等。注：这里的%表示取余运算（取余运算是指n除以m得到的余数）。

​  如果 :math:`S_{1} \subseteq S_{2}` 且 :math:`S_{1} \neq S_{2}` ，那么称 :math:`S_{1}` 是 :math:`S_{2}` 的真子集，记作 :math:`S_{1} \subset S_{2}` （读作 :math:`S_{1}` 真包含于 :math:`S_{2}` ）或 :math:`S_{1} \subset S_{2}` （读作 :math:`S_{2}` 真包含 :math:`S_{1}` ）。比如， :math:`Q \subset R` 。

  通常，没有元素的集合称为空集，记作 :math:`\varnothing` 。比如，由既是有理数又是无理数的实数为元素组成的集合。


1.2.3 集合的运算
----------------------------------
​  类似于数的运算，集合也有运算规则。由于集合是具有共同特征事物的全体，因此会用到将两个集合  :math:`S_{1}` 与  :math:`S_{2}` 共同的部分提取出来，这就是取两个集合的交集。换句话说，由所有既属于  :math:`S_{1}` 又属于  :math:`S_{2}` 的元素组成的集合称为  :math:`S_{1}` 与  :math:`S_{2}` 的交集（简称交），记作  :math:`S_{1} \cap S_{2}` 。用描述法表示为

.. math::
    S_{1} \cap S_{2}=\left\{\mathrm{s} \mid \mathrm{s} \in S_{1} \text { 且 } \mathrm{s} \in S_{2}\right\}

  比如，有理集  :math:`Q` 与无理数集  :math:`P` 的交集，  :math:`Q \cap P=\varnothing` .

  由所有属于  :math:`S_{1}` 或者属于  :math:`S_{2}` 的元素组成的集合称为  :math:`S_{1}` 与  :math:`S_{2}` 的并集 (简称并)，记作  :math:`S_{1} \cup S_{2}` ，即

.. math::
    S_{1} \cup S_{2}=\left\{s \mid s \in S_{1} \text { 或 } s \in S_{2}\right\}

  比如，有理集  :math:`Q` 与无理数集  :math:`P` 的并集

.. math::
    Q \cup P=\mathrm{R}

  由所有属于  :math:`S_{1}` 而不属于  :math:`S_{2}` 的元素组成的集合称为  :math:`S_{1}` 与  :math:`S_{2}` 的差集 (简称差)，记作  :math:`S_{1} \backslash S_{2}` ，即

.. math::
    S_{1} \backslash S_{2}=\left\{s \mid s \in S_{1} \text { 且 } s \notin S_{2}\right\}

  比如，有理集  :math:`Q` 与无理数集  :math:`P` 的差集

.. math::
    Q \backslash P=Q

  差集的一种特殊情况：当  :math:`S_{1}` 为所研究问题的最大集合时，所要研究的其他集合  :math:`S_{2}` 都是  :math:`S_{1}` 的子集，称集合  :math:`S_{1}` 为全集，称  :math:`S_{1} \backslash S_{2}` 为  :math:`S_{2}` 的补集或余集，记作  :math:`S_{2}^{c}` 。

  比如，在复数集  :math:`C` 中，实数集  :math:`R` 的补集为

.. math::
    R^{c}=\{x \mid x=a+b \cdot i, a \in R, b \in R \text { 且 } b \neq 0\}

​  除了集合之间的交、并和差运算之外, 还有一种常用的生成新集合的方式-直积或笛卡尔 (Descartes) 积。设  :math:`X` 、 :math:`Y`` 是任意两个集合, 在集合X中任意取一个元素  :math:`x` , 在集合Y中任意取一个元素y, 组成一个有序对  :math:`(\mathrm{x}, \mathrm{y})` ，再把这样大的有序对作为新的元素，它们全体组成集合称为集合  :math:`\mathrm{X}` 与集合  :math:`\mathrm{Y}` 的直积，记作  :math:`X \times Y` , 即

.. math::
    X \times Y=\{(x, y) \mid x \in X \text { 且 } y \in Y\}


  比如，  :math:`C \times C=\{(x, y) \mid x \in C` , :math:`y \in C}\` 为复平面上全体点的集合，  :math:`C \times C` 常记为  :math:`C^{2}` 。


1.2.4 集合的运算法则
----------------------------------
​  类似于数的运算法则，集合也有自己的运算法则。集合的交、并和补运算满足以下法则。

假设有任意的三个集合  :math:`X` 、 :math:`Y` 、 :math:`Z` ， 则有以下法则：

(1) 交换律  :math:`X \cup Y=Y \cup X` ,  :math:`\quad X \cap Y=Y \cap X` ;

(2) 结合律  :math:`(X \cup Y) \cup Z=X \cup(Y \cup Z)` , :math:`(X \cap Y) \cap Z=X \cap(Y \cap Z)` ;

(3) 分配律  :math:`(X \cup Y) \cap Z=(X \cap Z) \cup(Y \cap Z)` ， :math:`(X \cap Y) \cup Z=(X \cup Z) \cap(Y \cup Z)` ;

(4) 对偶律  :math:`(X \cup Y)^{c}=X^{c} \cap Y^{c}` , :math:`(X \cap Y)^{c}=X^{c} \cup Y^{c}` .

  若对这些规则的证明感兴趣, 可以通过集合相等的定义来证明。


1.2.5 映射
----------------------------------
​  上面讲述了集合, 然而有的集合之间并不是完全孤立的，而是有对应关系的。比如，中国四大名著的作者组成的集合A与四大名著B之间存在对应关系。

​  ​将这种普遍的共性抽象出来，设 :math:`D` 、 :math:`E` 是两个非空集合，如果存在一个对应法则  :math:`\mathrm{f}` , 使得对  :math:`\mathrm{D}` 中每个元素  :math:`x` , 按照对应法则  :math:`f` , 在E中有唯一确定的元素  :math:`y` 与  :math:`x` 对应，则称 :math:`f` 为从  :math:`D` 到 :math:`E` 的映射  :math:`[1, 3]`, 记作

.. math::
    f: D \rightarrow E

​  其中y称为元素  :math:`x` 在映射  :math:`f` 下的像，并记作  :math:`f(x)` ，即  :math:`y=f(x)` ，

​  而元素 :math:`x` 称为元素 :math:`y` 在映射 :math:`f` 下的一个原像; 集合 :math:`D` 为映射的定义域；集合E称为映射的陪域;  :math:`D` 中所有元素的像所组成的集合称为映射的值域，记作  :math:`R_{f}` 或  :math:`f(D)` ，即

.. math::
    R_{f}=f(D)=\{f(x) \mid x \in D\}=\{y \in E \mid \exists x \in D, f(x)=y\}
    
​  其中符号 :math:`\exists` 表示存在，可以看出，f的值域是f的陪域的子集。

​  集合D到自身一个映射，通常称为D上的一个变换。集合D到数集E的一个映射，常称为从D到E的函数。

​  如果映射f与映射g的定义域、陪域、对应法则分别对应相同，那么称这两个映射相等。

​  映射 :math:`f: D \rightarrow D` ​如果把D中每一个元素对应到它自身，即

 :math:`\forall x \in D` ，有 :math:`f(x)=x` ，

​  那么称f为恒等映射（或D上的恒等变换），记作 :math:`I_{D}` 。

​  先后施行映射 :math:`g: \mathrm{S}{1} \rightarrow S{2}` 和 :math:`f: S_{2} \rightarrow S_{3}` ，得到 :math:`S_{1}` 到 :math:`S_{3}` 的一个映射，称为 :math:`f` 与 :math:`g` 的合成（或乘积），记作 :math:`fg` 。即

.. math::
    (f g)(x) \equiv f(g(x)), \forall x \in S_{1}

​  定理 映射的乘法适合结合律。即如果

.. math::
    h: S_{1} \rightarrow S_{2}, g: \mathrm{S}_{2} \rightarrow S_{3}, f: S_{3} \rightarrow S_{4}
    
​  那么

.. math::
    f(g h)=(f g) h

















